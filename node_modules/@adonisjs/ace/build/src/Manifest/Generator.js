"use strict";
/*
 * @adonisjs/ace
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestGenerator = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const utils_1 = require("@poppinss/utils");
const validateCommand_1 = require("../utils/validateCommand");
/**
 * Exposes the API to generate the ace manifest file. The manifest file
 * contains the meta data of all the registered commands. This speeds
 * up the boot cycle of ace
 */
class ManifestGenerator {
    constructor(basePath, commands) {
        this.basePath = basePath;
        this.commands = commands;
    }
    /**
     * Loads a given command from the disk. A command line can recursively
     * exposed sub command paths. But they should be resolvable using
     * the base path
     */
    loadCommand(commandPath) {
        if (path_1.isAbsolute(commandPath)) {
            throw new utils_1.Exception('Absolute path to a command is not allowed when generating the manifest file');
        }
        const commandOrSubCommandsPaths = utils_1.esmRequire(utils_1.resolveFrom(this.basePath, commandPath));
        if (Array.isArray(commandOrSubCommandsPaths)) {
            return this.loadCommands(commandOrSubCommandsPaths);
        }
        /**
         * File export has command constructor
         */
        validateCommand_1.validateCommand(commandOrSubCommandsPaths, commandPath);
        return [
            {
                command: commandOrSubCommandsPaths,
                commandPath,
            },
        ];
    }
    /**
     * Loads all the commands from the disk recursively.
     */
    loadCommands(commandPaths) {
        return commandPaths.reduce((result, commandPath) => {
            result = result.concat(this.loadCommand(commandPath));
            return result;
        }, []);
    }
    /**
     * Generates and writes the ace manifest file to the base path
     */
    async generate() {
        const commands = this.loadCommands(this.commands);
        const manifest = commands.reduce((result, { command, commandPath }) => {
            result[command.commandName] = {
                settings: command.settings || {},
                commandPath: commandPath.replace(new RegExp(`${path_1.extname(commandPath)}$`), ''),
                commandName: command.commandName,
                description: command.description,
                args: command.args,
                flags: command.flags,
            };
            return result;
        }, {});
        await fs_extra_1.outputJSON(path_1.join(this.basePath, 'ace-manifest.json'), manifest);
    }
}
exports.ManifestGenerator = ManifestGenerator;
