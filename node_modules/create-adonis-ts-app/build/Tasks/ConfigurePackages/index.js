"use strict";
/*
 * create-adonis-ts-app
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const execa_1 = __importDefault(require("execa"));
const sink_1 = require("@adonisjs/sink");
const packages_1 = require("../../src/Schematics/packages");
/**
 * Configure installed packages by running `node ace invoke instructions`
 * on all of them in sequence
 */
const task = async (application, logger, { boilerplate, absPath }) => {
    let instructionsError = null;
    /**
     * Executing instructions in sequence. Do not convert this block to
     * parallel execution, since two instructions touching the same
     * file may lead to race conditions.
     */
    try {
        for (let pkg of Object.keys(packages_1.packages[boilerplate])) {
            await new sink_1.tasks.Instructions(pkg, absPath, application, false).useLogger(logger).execute();
        }
    }
    catch (error) {
        instructionsError = error;
    }
    /**
     * Handle error
     */
    if (instructionsError) {
        logger.fatal(instructionsError);
        throw instructionsError;
    }
    /**
     * Generate ace file in the newly created project
     */
    const manifest = execa_1.default.node('ace', ['generate:manifest'], {
        cwd: absPath,
        env: {
            FORCE_COLOR: 'true',
        },
    });
    manifest.stdout.pipe(process.stdout);
    /**
     * Generating ace-manifest file is a secondary action and errors
     * can be ignored
     */
    try {
        await manifest;
    }
    catch { }
};
exports.default = task;
