"use strict";
/*
 * create-adonis-ts-app
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTasks = void 0;
const getopts_1 = __importDefault(require("getopts"));
const fs_extra_1 = require("fs-extra");
const application_1 = require("@adonisjs/application");
const sink_1 = require("@adonisjs/sink");
const Tasks_1 = require("./Tasks");
const greet_1 = require("./src/Chalk/greet");
const art_1 = require("./src/Chalk/art");
const help_1 = require("./src/Chalk/help");
const Helpers_1 = require("./src/Helpers");
/**
 * Running all the tasks to create a new project.
 */
async function runTasks(args) {
    art_1.showArt();
    /**
     * Setup command line arguments
     */
    const argv = getopts_1.default(args, {
        string: ['boilerplate', 'name'],
        boolean: ['eslint', 'verbose', 'prettier'],
        default: {
            eslint: null,
            verbose: false,
            prettier: null,
        },
    });
    /**
     * Show help when no arguments are passed
     */
    if (!argv._.length) {
        console.log(help_1.getHelp(Helpers_1.usingYarn));
        return;
    }
    /**
     * First argument is the project path
     */
    const projectPath = argv._[0].trim();
    console.log('');
    console.log(sink_1.logger.colors.green('CUSTOMIZE PROJECT'));
    /**
     * Setup state
     */
    const state = await Helpers_1.getState(projectPath, {
        client: Helpers_1.usingYarn ? 'yarn' : 'npm',
        projectName: argv.name,
        boilerplate: argv.boilerplate,
        eslint: argv.eslint,
        prettier: argv.prettier,
    });
    /**
     * Return when directory is not empty
     */
    if (!sink_1.utils.isEmptyDir(state.absPath)) {
        const errors = [
            `Cannot overwrite contents of {${projectPath}} directory.`,
            'Make sure to define path to an empty directory',
        ];
        console.log('');
        sink_1.logger.error(errors.join(' '));
        return;
    }
    /**
     * Setup application
     */
    const application = new application_1.Application(state.absPath, 'console', {
        typescript: true,
    });
    /**
     * Decide the ui renderer to use
     */
    const tasksManager = argv.verbose ? sink_1.tasksUi.verbose() : sink_1.tasksUi();
    /**
     * Execute all tasks
     */
    Tasks_1.tasks.forEach(({ title, actions }) => {
        tasksManager.add(title, async (taskLogger, task) => {
            for (let action of actions) {
                await action(application, taskLogger, state);
            }
            await task.complete();
        });
    });
    console.log('');
    console.log(sink_1.logger.colors.green('RUNNING TASKS'));
    /**
     * Run tasks
     */
    try {
        await tasksManager.run();
    }
    catch (error) {
        tasksManager.state = 'failed';
        tasksManager.error = error;
    }
    console.log('');
    /**
     * Notify about failure
     */
    if (tasksManager.state === 'failed') {
        sink_1.logger.error('Unable to create project. Cleaning up');
        fs_extra_1.removeSync(state.absPath);
        return;
    }
    /**
     * Greet the user to get started
     */
    sink_1.logger.success('Project created successfully');
    greet_1.greet(state);
}
exports.runTasks = runTasks;
